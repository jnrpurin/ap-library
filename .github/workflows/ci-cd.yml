name: CI/CD - Tests, Coverage, Build & Publish Docker

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  packages: write
  id-token: write

env:
  SOLUTION_PATH: ./library-management-app/backend/LibraryManagementApp.sln
  UNIT_TEST_PROJECT_PATH: ./library-management-app/backend/UnitTests/UnitTests.csproj
  BACKEND_CONTEXT: ./library-management-app/backend
  FRONTEND_CONTEXT: ./library-management-app/frontend
  BACKEND_DOCKERFILE: ./library-management-app/backend/Dockerfile
  FRONTEND_DOCKERFILE: ./library-management-app/frontend/Dockerfile
  # Trocar o nome do usuário/imagem
  IMAGE_BACKEND: ${{ secrets.DOCKERHUB_USERNAME }}/library-backend
  IMAGE_FRONTEND: ${{ secrets.DOCKERHUB_USERNAME }}/library-frontend
  DOTNET_VERSION: '9.0.x'

jobs:
  test-and-coverage:
    name: Run Unit Tests & Generate Coverage Report
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET ${{ env.DOTNET_VERSION }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore ${{ env.SOLUTION_PATH }}

      - name: Build solution
        run: dotnet build ${{ env.SOLUTION_PATH }} --configuration Release --no-restore
      
      # O Coverlet gera os arquivos no diretório bin/Release/net9.0/ do projeto de teste.
      # "/p:CoverletOutput" força o nome do arquivo, com caminho padrão.
      - name: Run unit tests with coverage
        run: >
          dotnet test ${{ env.TEST_PROJECT_PATH }}
          --configuration Release
          --no-build
          --logger "trx;LogFileName=test_results.trx"
          /p:CollectCoverage=true
          /p:CoverletOutput=coverage/
          /p:CoverletOutputFormat=cobertura
          /p:ExcludeByFile="**/Migrations/*"
          /p:Threshold=70
        env:
          TEST_PROJECT_PATH: ${{ env.UNIT_TEST_PROJECT_PATH }}

      # O Coverlet salva a saída na pasta bin/ do projeto de teste.
      # Caminho completo: ./library-management-app/backend/UnitTests/bin/Release/net9.0/coverage/
      - name: Set coverage path variable
        id: coverage_path
        run: |
          echo "COVERAGE_DIR=${{ env.BACKEND_CONTEXT }}/UnitTests/bin/Release/net9.0/" >> $GITHUB_ENV
          echo "REPORT_DIR=${{ env.BACKEND_CONTEXT }}/UnitTests/bin/Release/net9.0/CoverageReport" >> $GITHUB_ENV
          echo "COBERTURA_FILE=${{ env.BACKEND_CONTEXT }}/UnitTests/bin/Release/net9.0/coverage.cobertura.xml" >> $GITHUB_ENV
        
      - name: List coverage output (Debug)
        run: |
          echo "Listing files in: ${{ env.COVERAGE_DIR }}"
          ls -R ${{ env.COVERAGE_DIR }}

      - name: Install ReportGenerator
        run: dotnet tool install -g dotnet-reportgenerator-globaltool

      - name: Create coverage report (HTML)
        run: >
          reportgenerator
          -reports:${{ env.COBERTURA_FILE }}
          -targetdir:${{ env.REPORT_DIR }}
          -reporttypes:Html
        env:
          PATH: $PATH:/home/runner/.dotnet/tools
          
      # Publicar Resultados dos Testes
      - name: Upload test results (TRX)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results
          path: '**/TestResults/*.trx'
          if-no-files-found: warn

      # Publicar Relatório de Cobertura (HTML)
      - name: Upload coverage report (HTML)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: ${{ env.REPORT_DIR }}
          if-no-files-found: warn

---
  build-and-push:
    name: Build Docker images & Publish
    runs-on: ubuntu-latest
    needs: test-and-coverage
    concurrency:
      group: ci-cd-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Build & push backend image
      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ${{ env.BACKEND_CONTEXT }}
          file: ${{ env.BACKEND_DOCKERFILE }}
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: >
            ${{ env.IMAGE_BACKEND }}:${{ github.sha }}
            ${{ env.IMAGE_BACKEND }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Build & push frontend image
      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ${{ env.FRONTEND_CONTEXT }}
          file: ${{ env.FRONTEND_DOCKERFILE }}
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: >
            ${{ env.IMAGE_FRONTEND }}:${{ github.sha }}
            ${{ env.IMAGE_FRONTEND }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max